package com.example.reba;

import android.util.Log;

class MLPClassifier {

    private enum Activation { IDENTITY, LOGISTIC, RELU, TANH, SOFTMAX }

    private Activation hidden;
    private Activation output;
    private double[][] network;
    private double[][][] weights;
    private double[][] bias;

    public MLPClassifier(String hidden, String output, int[] layers, double[][][] weights, double[][] bias) {
        this.hidden = Activation.valueOf(hidden.toUpperCase());
        this.output = Activation.valueOf(output.toUpperCase());
        this.network = new double[layers.length + 1][];
        for (int i = 0, l = layers.length; i < l; i++) {
            this.network[i + 1] = new double[layers[i]];
        }
        this.weights = weights;
        this.bias = bias;
    }

    public MLPClassifier(String hidden, String output, int neurons, double[][][] weights, double[][] bias) {
        this(hidden, output, new int[] { neurons }, weights, bias);
    }

    private double[] compute(Activation activation, double[] v) {
        switch (activation) {
            case LOGISTIC:
                for (int i = 0, l = v.length; i < l; i++) {
                    v[i] = 1. / (1. + Math.exp(-v[i]));
                }
                break;
            case RELU:
                for (int i = 0, l = v.length; i < l; i++) {
                    v[i] = Math.max(0, v[i]);
                }
                break;
            case TANH:
                for (int i = 0, l = v.length; i < l; i++) {
                    v[i] = Math.tanh(v[i]);
                }
                break;
            case SOFTMAX:
                double max = Double.NEGATIVE_INFINITY;
                for (double x : v) {
                    if (x > max) {
                        max = x;
                    }
                }
                for (int i = 0, l = v.length; i < l; i++) {
                    v[i] = Math.exp(v[i] - max);
                }
                double sum = 0.;
                for (double x : v) {
                    sum += x;
                }
                for (int i = 0, l = v.length; i < l; i++) {
                    v[i] /= sum;
                }
                break;
        }
        return v;
    }

    public int predict(double[] neurons) {
        this.network[0] = neurons;

        for (int i = 0; i < this.network.length - 1; i++) {
            for (int j = 0; j < this.network[i + 1].length; j++) {
                this.network[i + 1][j] = this.bias[i][j];
                for (int l = 0; l < this.network[i].length; l++) {
                    this.network[i + 1][j] += this.network[i][l] * this.weights[i][l][j];
                }
            }
            if ((i + 1) < (this.network.length - 1)) {
                this.network[i + 1] = this.compute(this.hidden, this.network[i + 1]);
            }
        }
        this.network[this.network.length - 1] = this.compute(this.output, this.network[this.network.length - 1]);

        if (this.network[this.network.length - 1].length == 1) {
            if (this.network[this.network.length - 1][0] > .5) {
                return 1;
            }
            return 0;
        } else {
            int classIdx = 0;
            for (int i = 0; i < this.network[this.network.length - 1].length; i++) {
                classIdx = this.network[this.network.length - 1][i] > this.network[this.network.length - 1][classIdx] ? i : classIdx;
            }
            return classIdx;
        }

    }

    public static int main(String[] args) {
        if (args.length == 4) {

            // Features:
            double[] features = new double[args.length];
            for (int i = 0, l = args.length; i < l; i++) {
                features[i] = Double.parseDouble(args[i]);
            }

            // Parameters:
            int[] layers = {10, 10, 10, 10, 3};
            double[][][] weights = {{{0.517076471393265, -0.0021017418614001477, 0.4753439398275104, -6.517889193015043e-12, -0.0010674277053906403, 0.0367076444685141, 0.49615483783288067, -0.3542714702084061, 0.40285759490282236, 0.3282233203392212}, {0.43758292928436987, -0.00043509436068151506, 0.2435608349073257, -1.8069702783856226e-07, 1.9169363110794353e-41, 0.0012547709825794552, -0.16836151713520994, 0.3895123925506403, 0.4491629919230129, 0.18890609895555077}, {0.3670664794923491, -1.0819020569512168e-08, -0.6452633965327594, -7.583366093465868e-06, 1.2604088526917062e-33, -0.0003822380579856516, 0.7127434875168536, 0.3109751966238817, 0.8979969495991588, -0.18633547259288596}, {-0.09956406582328262, -0.0006091612450613861, 0.636689487998269, 7.358329710801916e-10, -0.0032809190120926764, -0.011651147469203703, 0.399175723953496, 0.7723459676119396, -0.22680538755892451, 0.6384068311943509}}, {{-0.3060049973175556, 0.1725638943525921, -9.402317065516661e-06, -6.602684891769002e-08, 0.53155179490645, 0.09601169723132165, -1.3793414389530405e-35, -0.014147434299283336, -8.113062913565795e-24, -0.09809041355803529}, {-2.8272321501072244e-06, -4.035350790966683e-09, 6.352527916685666e-15, 3.205802681677727e-05, -5.04854355854289e-05, -1.150727144279145e-09, -7.505711474130322e-07, -5.888015648119521e-06, 5.788391722958834e-37, 1.5913750831637856e-10}, {-0.143905970554024, 0.5949116901809881, -2.971531476100287e-08, -9.012935719718956e-41, -0.5639962883999564, 0.006473461383977358, -5.952613611286438e-20, -0.07125681193398398, 1.9411810747967264e-05, 0.7330466149358128}, {-7.866594589600946e-37, 6.7011062659035794e-06, -4.027721078931438e-08, 7.98744358824621e-33, 1.743590882400546e-29, -2.7393933482562513e-13, 1.3926670662348547e-06, -3.532576331068961e-05, -2.0768449784642474e-37, 2.4711948684601902e-08}, {8.950152966382648e-34, 1.8129829301910412e-09, -4.0719261311651084e-05, -2.4457512569089377e-39, 2.7783428979098225e-06, 1.9439900616866746e-10, -1.513077677417964e-38, 0.0001949121947968508, 4.103531493587797e-40, -4.256499453901393e-40}, {4.3460436972208215e-06, -0.0009098077417047403, -1.0585744387967178e-12, -4.816219306818884e-07, -0.0001307946549394599, 2.7544293941411266e-11, -7.213737878380961e-40, 0.00022174491179229492, 1.2259877322663704e-29, -0.000323073316565771}, {0.2517958333359168, 0.5448365786582151, -0.00017463787943649834, -5.139890201849602e-41, 0.3040786187465502, -0.14397678358072385, -6.569154527764602e-39, 0.13623238710247862, -1.4093899263047401e-06, -0.09616635658407545}, {0.379649780922548, 0.787101554957059, -1.4020386229023523e-28, -1.3873823684389582e-40, -0.5823947843652875, -0.08872978647908826, -9.59034646350434e-12, 0.33298942060312997, 1.607906822804171e-17, 0.2762497677383106}, {0.6293919401814035, -0.03651481916113494, 3.587470713761214e-29, -2.2208176937598858e-05, 0.6161517755919043, 0.016911274673224543, 3.7209095575403832e-34, 0.48666097548545456, 0.00023795122362913794, -0.08939015080448132}, {-0.22274038650728817, 0.6642214083209295, -1.3884260014329852e-38, 2.4444959852773632e-08, 0.26841697731146663, -0.04712380274922979, -5.656283032614839e-07, -0.462855214574985, -1.84558167223827e-05, 0.5806832566423719}}, {{0.18436701995453778, -0.2850162877701385, -0.4617480497683432, 3.961198251139673e-05, 1.8176102358990117e-17, 0.10048224214002786, -0.049269672679238874, 0.25031740872004904, -0.38423932098018654, -2.2978483076119504e-05}, {-0.17546970478383617, -0.10349914738865573, 0.03502158178347631, 3.966623231428167e-40, -2.726550821244081e-10, 0.4812385984579268, -0.13672887226078706, 0.511659236198062, 0.3585116398819072, 7.412710812159176e-28}, {0.00010033686171802212, 0.0004356661212580527, 6.0533674230039805e-05, -4.396328534801386e-06, 0.0002334075082755727, -0.0006111718772299627, 3.4328947659844946e-22, -5.290124864520658e-41, -2.0316539065898975e-05, -2.9814367774972055e-37}, {7.39985295844172e-41, 1.4187907836309191e-34, -0.00019680147923393978, 2.5689971588797757e-40, -1.0693850002255644e-07, -2.0169987019031047e-37, 1.9951281587998575e-06, 4.164153058608558e-38, 7.591849673627715e-05, -4.873329295134832e-38}, {0.8331656546190909, 0.058100359408171605, 0.045470300368574315, -6.1069934473183495e-06, 1.8320232260021105e-38, -0.445245093347604, 0.07498302995842965, 0.16463842339370174, 0.11714820358363325, 4.358760611025523e-28}, {0.11010376881748861, 0.3179820706890017, 0.3430927941543914, -1.676698108934081e-40, -1.4160290957582413e-07, -0.15336436410584117, 0.3224600020575951, -0.2670896300723374, -0.0071316845807062115, 1.2426810286784436e-11}, {2.5985976718358925e-09, 2.6847974795488955e-06, -0.00010003493726608463, 2.7539415180602965e-09, -0.0002964188848472991, -1.3848811444947008e-10, 2.2301619297537356e-34, -6.082680278666166e-39, -0.0001782960907418588, 4.7389279704612814e-24}, {0.25662762797376065, -0.1334953384651178, -0.4555246480765006, 2.352469002142548e-15, 3.819120427385658e-06, -0.04901335249739036, -0.05961125142667219, 0.25976727353876605, -0.13880546202220528, 3.035540846082913e-05}, {-6.040989468564447e-07, 9.075896476976337e-09, -9.662833122972468e-30, 8.217581126195229e-28, -0.00019837069443295232, -1.6334558705146387e-07, -1.7667207530088324e-08, 9.280552818303376e-11, 2.0302823837271455e-14, -8.883148863640518e-14}, {-0.4245808438054917, 0.2585332708577263, 0.35415106765515075, -6.743791330541991e-36, -3.466597611487511e-11, 0.725169978716076, -0.01602850508960419, 0.1018028843633395, 0.6408931923101091, -2.4015204893767923e-06}}, {{0.631659735436538, 0.03835990879253892, -2.4285660673125145e-36, 0.23724367609224478, -0.10353266333462878, -0.1659388651737462, -0.16358330128325488, 0.5983399039675571, 0.5663665757873421, 0.054247304406128766}, {0.08807482806518789, 0.0035505890627707207, 1.313465777254625e-38, 0.035403169239205015, 0.3415959714139183, 0.38183337375562554, -0.4733034313982261, 0.20498947902993764, 0.3058876767681036, 0.24063959688102557}, {0.1292077418577047, -0.0017923530084339558, -0.00045685265071073816, 0.08772629821792063, 0.33401262050812236, 0.574464013382514, -0.37497198992491215, 0.3994825400339938, 0.47137565824100724, 0.2197484702639629}, {6.253210446414291e-08, -1.209707335504102e-21, 6.8569780386324786e-06, -1.6675723014197956e-37, -2.203746065672233e-29, 7.421675536380464e-05, 8.568492072501147e-07, -0.00020510175313000754, -2.050356825931382e-34, 1.8177872332135024e-10}, {0.0004306270569803826, -4.2700884973759405e-36, -8.247457015367738e-37, -7.600570235335333e-05, 2.495519307799697e-06, -3.0692986775579205e-41, 7.322921203911509e-23, 4.6713576326945395e-32, -8.506979386836398e-31, 9.795904355404226e-09}, {-0.25233016056929536, -0.06466280268988098, 1.999986642541881e-05, -0.4362812071536769, -0.21515880527917958, 0.3174265527328322, 0.6854394003522549, -0.247785144062348, -0.32479207936023247, -0.11815542629947204}, {0.11029654279887469, 0.02214380592411752, 0.000324827415305945, 0.06602771190436327, 0.28865869944234046, 0.4214567864382429, -0.41339091890434865, 0.17343602189697674, 0.21862896856906308, 0.2512830673411676}, {-0.05365618902446214, -0.06976041098077317, -2.218185898784485e-05, 0.33552469710374044, -0.18388014748236037, -0.40135884312094006, 0.5071840716056644, -0.04115864334382154, -0.24576995108815314, -0.09666544046699493}, {-0.10045933417166888, -0.06659660991345441, 2.5739906136868073e-19, -0.15592106608987671, 0.2517532479014187, 0.4526069796476002, 0.6154942844174068, -0.2512521212898173, 0.011395477258746898, -0.03265557684063074}, {-2.850988945809049e-08, 1.6591495889563894e-17, 3.5393037275869294e-21, 6.019108350036533e-07, 4.3457036830276106e-32, 5.3585375064912165e-37, 5.244674992143773e-19, 6.2243036370099715e-31, -3.45896006712245e-06, -5.307139269796038e-11}}, {{-0.25221021450407155, 0.3739263003159112, -0.619375927573754}, {0.02599953196383319, 0.08021480696448394, -0.11819555105498496}, {-0.002862003333771496, 0.0023361404061282886, 1.616193137265761e-08}, {-0.20222449619872224, 0.2045259636116382, -0.4777957185301054}, {-0.7835087647605147, 0.246935479311226, 0.00795925691836277}, {-0.5774789452460959, -0.2095439912702532, 0.6715740952376401}, {0.9377108615375104, -0.8354327182529032, -0.10797277588215273}, {-0.48662859472683373, 0.48298903348109234, -0.5360342985271197}, {-0.37476815522268364, 0.7598932980314391, 0.07278787236016429}, {-0.44760646134270377, 0.15195862713267397, 0.31791831518757}}};
            double[][] bias = {{0.41171487507708343, -0.005593810838315013, -0.47644192780253297, -0.3813215471834906, -0.4134395264912697, -0.4304556740343283, -0.40461929570509425, -0.821859630772088, -0.48246095661920135, -0.16126834189799188}, {-0.05994099005477696, -0.5367117161964413, -0.3841222169220808, -0.30501090543066856, -0.10195090774152615, 0.42279512240308786, -0.25556619508401157, -0.22620093651002127, -0.08986021591919849, 0.21985386470034546}, {0.4020469262552181, 0.6502165083131797, 0.7987747531782929, -0.4329219934365206, -0.5375123056403718, -0.14893353767102857, 0.7171002637632751, -0.8999694513186995, -0.25690893983058066, -0.007388668873360895}, {0.14537331664194464, 0.330773130840314, -0.28867285058065073, 0.48732384003704876, 0.5637830649710347, 0.711058881053388, -0.0536139294803736, 0.00858202822516078, 0.5762187378899852, 0.50158703754608}, {0.19825402846971293, 0.12409143747498032, 0.3876032888354022}};

            // Prediction:
            MLPClassifier clf = new MLPClassifier("relu", "softmax", layers, weights, bias);
            int estimation = clf.predict(features);
            Log.i("PRERDS",""+estimation);
            System.out.println(estimation);

            return estimation;

        }
        return 0;
    }
}